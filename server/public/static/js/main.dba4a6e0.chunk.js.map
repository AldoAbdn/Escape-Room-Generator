{"version":3,"sources":["middleware/logger.js","middleware/index.js","reducers/index.js","actions/actionCreators.js","components/Main.js","components/App.js","components/Dashboard.js","components/Login.js","components/ProtectedRoute.js","serviceWorker.js","index.js","stores/store.js"],"names":["logger","store","next","action","console","groupCollapsed","type","info","result","log","getState","groupEnd","middleware","reduxThunk","reduxPromiseMiddleware","reducers","reduxifiedServices","combineReducers","users","reducer","escapeRooms","routing","routerReducer","login","username","token","logout","updateEscapeRooms","addEscapeRoom","id","user","escapeRoom","removeEscapeRoom","i","Main","react_default","a","createElement","className","href","React","cloneElement","this","props","children","Component","App","connect","state","dispatch","bindActionCreators","actionCreators","Dashboard","Link","to","Login","ProtectedRoute","authed","react","Redirect","location","Boolean","window","hostname","match","__webpack_require__","d","__webpack_exports__","feathersClient","feathers","configure","socketio","io","hooks","initialState","createStoreWithDevTools","devToolsExtension","createStore","applyMiddleware","apply","Object","toConsumableArray","middlewares","createStoreWithMiddlewares","rootReducer","configureStore","reduxifyServices","router","es","BrowserRouter","components_App","exact","from","Route","path","render","routeProps","components_Dashboard","assign","test","components_ProtectedRoute","component","Profile","EscapeRoomDesigner","Signup","About","Tutorials","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dba4a6e0.chunk.js","sourcesContent":["/*\r\n A basic middleware logger\r\n See http://redux.js.org/docs/advanced/Middleware.html\r\n */\r\n\r\nconst logger = store => next => action => {\r\n    console.groupCollapsed(action.type); // eslint-disable-line no-console\r\n    console.info('dispatching', action); // eslint-disable-line no-console\r\n    const result = next(action);\r\n    console.log('next state', store.getState()); // eslint-disable-line no-console\r\n    console.groupEnd(action.type); // eslint-disable-line no-console\r\n    return result;\r\n  };\r\n  \r\n  export default logger;","// eslint no-unused-vars: 0,\r\n\r\nimport reduxThunk from 'redux-thunk';\r\nimport reduxPromiseMiddleware from 'redux-promise-middleware';\r\n// import { routerMiddleware } from 'react-router-redux';\r\n// import { browserHistory } from 'react-router';\r\nimport logger from './logger'; // eslint-disable-line no-unused-vars\r\n\r\nexport default [\r\n  reduxThunk, // Thunk middleware for Redux\r\n  reduxPromiseMiddleware(), // Resolve, reject promises with conditional optimistic updates\r\n  // routerMiddleware(browserHistory), // !! IMPORTANT for location.href changes\r\n  logger, // A basic middleware logger\r\n];","import { combineReducers } from 'redux';\r\nimport { routerReducer } from 'react-router-redux';\r\n\r\nexport default function(reduxifiedServices){\r\n    return combineReducers({\r\n        users: reduxifiedServices.users.reducer,\r\n        escapeRooms: reduxifiedServices.escapeRooms.reducer,\r\n        routing: routerReducer \r\n    })\r\n}\r\n","//Login \r\nexport function login(username, token){\r\n    return {\r\n        type: 'LOGIN',\r\n        username,\r\n        token\r\n    }\r\n}\r\n\r\n//Logout\r\nexport function logout(username, token){\r\n    return {\r\n        type: 'LOGOUT',\r\n        username,\r\n        token\r\n    }\r\n}\r\n\r\n//Update Escape Rooms\r\nexport function updateEscapeRooms(escapeRooms){\r\n    return {\r\n        type:'UPDATE_ESCAPE_ROOMS',\r\n        escapeRooms\r\n    }\r\n}\r\n\r\n//Add Escape Room\r\nexport function addEscapeRoom(id, user, escapeRoom){\r\n    return {\r\n        type: 'ADD_ESCAPE_ROOM',\r\n        id,\r\n        user,\r\n        escapeRoom\r\n    }\r\n}\r\n\r\n//Remove Escape Room\r\nexport function removeEscapeRoom(id, i){\r\n    return {\r\n        type: 'REMOVE_ESCAPE_ROOM',\r\n        i\r\n    }\r\n}\r\n","import React, {Component}  from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Main extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"main container\">\r\n                <header>\r\n                    <h1 className=\"title\">\r\n                        <a href=\"/\">Escape Room Generator</a>\r\n                    </h1>\r\n                </header>\r\n\r\n                    {React.cloneElement(this.props.children, this.props)}   \r\n       \r\n                <footer>\r\n                    <a href=\"/about\">About</a>\r\n                    <a href=\"/tutorials\">Tutorials</a>\r\n                </footer>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Main;","import { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport * as actionCreators from '../actions/actionCreators';\nimport Main from './Main';\n\nfunction mapStateToProps(state) {\n  return {\n    users: state.users,\n    escapeRooms: state.escapeRooms\n  }\n}\n\nfunction mapDispatchToProps(dispatch){\n  return bindActionCreators(actionCreators, dispatch);\n}\n\nconst App = connect(mapStateToProps, mapDispatchToProps)(Main);\n\nexport default App;\n","import React, {Component} from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Dashboard extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"main container\">\r\n                <header>\r\n                    <h1 className=\"title\">\r\n                        <Link to=\"/\">Escape Room Generator</Link>\r\n                    </h1>\r\n                </header>\r\n                <footer>\r\n                    <Link to=\"/about\">About</Link>\r\n                    <Link to=\"/tutorials\">Tutorials</Link>\r\n                </footer>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Dashboard;","import React, {Component} from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Login extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"main container\">\r\n                <header>\r\n                    <h1 className=\"title\">\r\n                        <Link to=\"/\">Escape Room Generator</Link>\r\n                    </h1>\r\n                </header>\r\n                <footer>\r\n                    <Link to=\"/about\">About</Link>\r\n                    <Link to=\"/tutorials\">Tutorials</Link>\r\n                </footer>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Login;","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass ProtectedRoute extends Component {\r\n    render(){\r\n        if (this.props.authed === true){\r\n            return (<Component {...this.props}/>)\r\n        } else {\r\n            return (<Redirect to='/login' state={this.props.location}/>)\r\n        }\r\n    }\r\n}\r\n\r\nexport default ProtectedRoute;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","//React Imports \nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Route, Switch } from 'react-router';\nimport { BrowserRouter, Redirect } from 'react-router-dom';\n//Redux Imports\nimport { Provider } from 'react-redux';\n//Store \nimport configureStore from './stores/store'\n//Feathers\nimport io from 'socket.io-client';\nimport feathers from 'feathers-client';\n//Feathers-Redux\nimport reduxifyServices from 'feathers-redux';\n//CSS\nimport './index.css';\n//Components\nimport { App, Dashboard, EscapeRoomDesigner, Login, Signup, Tutorials, About, ProtectedRoute, Profile } from './components/index';\n//Service Worker \nimport * as serviceWorker from './serviceWorker';\n\n//Feathers Configuration \nexport const feathersClient = feathers()\n    .configure(feathers.socketio(io()))\n    .configure(feathers.hooks());\n\n//Configure Redux\nconst services = reduxifyServices(feathersClient, ['users', 'escapeRooms']);\nconst store = configureStore(services);\nconsole.log(store);\n//const history = syncHistoryWithStore(store);\n\n//Router\nconst router = (\n    <Provider store={store}>\n            <BrowserRouter>\n                <App>\n                    <Redirect exact from=\"/\" to=\"/dashboard\"/>\n                    <Route path=\"/dashboard\" render={(routeProps) => (<Dashboard {...routeProps} test=\"test\"/>)}/>\n                    <ProtectedRoute path=\"/profile\" component={Profile}/>\n                    <ProtectedRoute path=\"/designer\" component={EscapeRoomDesigner}/>\n                    <Route path=\"/login\" component={Login}></Route>\n                    <Route path=\"/signup\" component={Signup}></Route>\n                    <Route path=\"/about\" component={About}></Route>\n                    <Route path=\"/tutorials\" component={Tutorials}></Route>\n                </App>\n\n            </BrowserRouter>\n    </Provider>\n);\n\n//Render Router \nReactDOM.render(router, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\r\nimport middlewares from '../middleware';\r\nimport rootReducer from '../reducers';\r\n\r\nexport default function configureStore(reduxifiedServices, initialState) {\r\n    const createStoreWithDevTools = window.devToolsExtension ? window.devToolsExtension()(createStore) : createStore;\r\n    const createStoreWithMiddlewares = applyMiddleware(...middlewares)(createStoreWithDevTools);\r\n    return createStoreWithMiddlewares(rootReducer(reduxifiedServices),initialState);\r\n}"],"sourceRoot":""}